/** COMMENTS ********************************************************/
/*	Your name: ALexandra WOlf
	Class block: 			H	Date:
	Lab:
	Title: lab 12
	Objective:
*/

// Have char sign in switch-case
//make sure all parameters match
/** INCLUDE FILES ***************************************************/

#include <iostream>	//	input output commands:	cout & cin
using namespace std;

/** FUNCTION PROTOTYPES**********************************************/
void getinput (int &numerator1, int &denominator1, int &numerator2 , int &denominator2);
int greatestCommonDivisor(int denominator1, int denominator2);
void LCM(int &numerator1, int &denominator1,int &numerator2, int &denominator2);
void add(int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer);// ideas for variables 2 answer ones a gcf? and lcm?
void subtract(int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer);
void multiply (int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer);
void divide (int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer);
void reduceFraction( int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom, int &gcf);
void output(int numerator1, int denominator1, int numerator2, int denominator2, int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom, char &sign);

/** MAIN FUNCTION ***************************************************/
int main()
{
	cout << "in main" << endl;
	/** VARIABLE DECLARATION ****************************************/

	int option, numerator1, denominator1, numerator2 , denominator2, gcf,  numanswer, denanswer , reducednumerator, reduceddenom;

	char anotherproblem = 'y', sign;

	/** FUNCTION CALLS***********************************************/
	do
	{

		cout << "in do-while" << endl;

 getinput (numerator1, denominator1, numerator2 , denominator2);
 cout << "Done with getinput" << endl;
 greatestCommonDivisor(denominator1, denominator2);
 LCM(numerator1, denominator1, numerator2, denominator2); //calculate LCM for fractions and convert fractions into fractions with common denominators

			cout <<"Menu of Operations \nAdd...................1 \nSubtract..............2 \nMultiply..............3 \nDivide................4\n";
			cout <<"Which operation? ";
			cin >> option;
			cout <<endl;


		switch (option)
		{
		case 1:

			 add(numerator1, denominator1, numerator2 , denominator2, numanswer, denanswer);
			 sign = '+';
			 break;
		case 2:
			 subtract(numerator1, denominator1, numerator2 , denominator2, numanswer, denanswer);
			 sign='-';
			 break;
		case 3:

			 multiply ( numerator1, denominator1, numerator2 ,denominator2,  numanswer, denanswer);
			 sign='*';
			 break;
		case 4:

			 divide (numerator1, denominator1, numerator2 , denominator2,  numanswer, denanswer);
			 sign= '/';
			 break;
		}

		 reduceFraction(numanswer, denanswer, reducednumerator, reduceddenom, gcf);//reduce fraction function
		  output( numerator1,  denominator1,  numerator2,  denominator2, numanswer, denanswer, reducednumerator, reduceddenom, sign);//call output function

			cout << "Another problem (y for yes, n for no)? ";
			cin >> anotherproblem;

	} while (anotherproblem == 'y');

	return 0;
	}



/** FUNCTIONS *******************************************************/
void getinput (int &numerator1, int &denominator1, int &numerator2 , int &denominator2)
{
	do
		{
		cout <<"Enter the numerator and denominator of the first fraction: ";
		cin >> numerator1 >> denominator1;
		cout <<"Enter the numerator and denominator of the second fraction: ";
		cin >> numerator2 >> denominator2 ;
		cout <<endl;

		if (denominator2 == 0 ||denominator1 ==0)
		{
			cout<< "Fractions cannot have a denominator of zero"<< endl;
			cout << "Please enter valid input" <<endl <<endl;
		}

		}while (denominator2 == 0 ||denominator1 ==0);
}
int greatestCommonDivisor(int denominator1, int denominator2) // we need this function to reduce fractions to simplest form
	{

	int remainder=0, small=0, big=0, gcf;

		if(denominator1 > denominator2) //if first number is the larger number do this code
		{

				 big = denominator1;
				 small = denominator2;

		}



		else if (denominator1 == denominator2)          //if numbers are the same the common divisor is the same  number
		{
			return denominator1;
		}


		else //do this code if the second number is the larger number
		{
			small= denominator1;
			big=denominator2;
		}

		do
		{
				remainder = big % small;
				big=small;
				small = remainder;
		}while (remainder != 0); //do while or while loop to go while the remainder is not equal to zero

		gcf=big;
		return gcf;
	}
void LCM(int &numerator1, int &denominator1,int &numerator2, int &denominator2)
{
	int gcf=0, LCM;

	gcf = greatestCommonDivisor(denominator1,  denominator2);
	LCM= (denominator1 *denominator2)/ gcf;
numerator1= ((LCM /denominator1)*numerator1);
numerator2 = ((LCM/ denominator2)*numerator2);
denominator1=LCM;

}

void add(int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer)
{
	denanswer= denominator1;
	numanswer= numerator1 + numerator2;   //divide LCM by original denominators and multiply by original numerators


//call reduce fraction
//maybe call reduce fraction function and output function in the main function
}

void subtract(int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer)
{
	denanswer= denominator1;
	numanswer= numerator1 - numerator2;


//call reduce fraction
//maybe call reduce fraction function and output function in the main function
}

void multiply (int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer)
{
	numanswer= numerator1*numerator2;
	denanswer= denominator1*2;

}

void divide (int &numerator1, int &denominator1, int &numerator2 , int &denominator2,  int &numanswer, int &denanswer)
{
	//cross multiplying is the same as fliping the second fraction and then multiplying
	numanswer= numerator1*denominator1; //I use denominator1 twice because in thes LCM function I have made denominator1 =to the LCM and so both denominator1 and denominator2 are equal to the LCM
	denanswer= denominator1*numerator2;


if (numerator2==0)
	{
		cout<< "You cannot have a zero in the numerator because when you flip the second fraction you will get a numerator in the denominator!"<<endl <<endl;
		return; // returning to main function to get valid input by running input and menu again
	}


}
//reduce fraction function
void reduceFraction( int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom, int &gcf)
{
	//gcf=  greatestCommonDivisor( newnumanswer,  denanswer); dont think I need this

	reducednumerator = numanswer/gcf;
	reduceddenom = denanswer / gcf;

}

//output function
void output(int numerator1, int denominator1, int numerator2, int denominator2, int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom, char &sign)
{
cout << numerator1 <<" "<< numerator2<<"" << numanswer << " " << reducednumerator<< endl;
cout << "--- "<< sign << " --- = --- = ---"<<endl;
cout << denominator1 << " " << denominator2 << " " << denanswer << " "<< reduceddenom << endl;
}

