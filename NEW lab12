/** COMMENTS ********************************************************/
/*	Your name: ALexandra WOlf
	Class block: 			H	Date:
	Lab:
	Title: lab 12
	Objective:
*/

// teh numanswer adn denanswer r not wokring because each void function is eperate and has a distinct set of variablesthey r isolated per function
//make sure all parameters match
/** INCLUDE FILES ***************************************************/

#include <iostream>	//	input output commands:	cout & cin
using namespace std;

/** FUNCTION PROTOTYPES**********************************************/
void getinput (int &numerator1, int &denominator1, int &numerator2 , int &denominator2);
int greatestCommonDivisor(int denominator1, int denominator2);
int LCM( int denominator1, int denominator2);
void add(int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer);
void subtract(int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer);
void multiply (int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer);
void divide (int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer);
void reduceFraction( int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom );
void output(int numerator1, int denominator1, int numerator2, int denominator2, int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom, char &sign);

/** MAIN FUNCTION ***************************************************/
int main()
{

	/** VARIABLE DECLARATION ****************************************/

	int option, numerator1, denominator1, numerator2 , denominator2,  numanswer, denanswer , reducednumerator, reduceddenom;

	char anotherproblem = 'y', sign;

	/** FUNCTION CALLS***********************************************/
	do
	{


	do
	{



		 getinput (numerator1, denominator1, numerator2 , denominator2);



			cout <<"Menu of Operations \nAdd...................1 \nSubtract..............2 \nMultiply..............3 \nDivide................4\n";
			cout <<"Which operation? ";
			cin >> option;
			cout <<endl;

			if (numerator2 == 0 && option ==4 )
				{
			cout << "You cannot have a zero in the numerator because when you flip the second fraction you will get a numerator in the denominator!"<<endl<<endl;
				}

	} while( numerator2 == 0 && option ==4 );

		switch (option)
		{
		case 1:

			 add(numerator1, denominator1, numerator2 , denominator2, numanswer, denanswer);
			 sign = '+';
			 break;
		case 2:
			 subtract(numerator1, denominator1, numerator2 , denominator2, numanswer, denanswer);
			 sign='-';
			 break;
		case 3:

			 multiply ( numerator1, denominator1, numerator2 ,denominator2,  numanswer, denanswer);
			 sign='*';
			 break;
		case 4:

			 divide (numerator1, denominator1, numerator2 , denominator2,  numanswer, denanswer);
			 sign= '/';
			 break;
		}

if (numanswer != 0 && denanswer !=0 )
{
 reduceFraction(numanswer, denanswer,reducednumerator, reduceddenom );//reduce fraction function
}
		  output( numerator1,  denominator1,  numerator2,  denominator2, numanswer, denanswer, reducednumerator, reduceddenom, sign);//call output function

			cout <<endl <<endl<< "Another problem (y for yes, n for no)? ";
			cin >> anotherproblem;
cout << endl;
	} while (anotherproblem == 'y');



	return 0;
	}



/** FUNCTIONS *******************************************************/
void getinput (int &numerator1, int &denominator1, int &numerator2 , int &denominator2)
{
	do
		{
		cout <<"Enter the numerator and denominator of the first fraction: ";
		cin >> numerator1 >> denominator1;
		cout <<"Enter the numerator and denominator of the second fraction: ";
		cin >> numerator2 >> denominator2 ;
		cout <<endl;

		if (denominator2 == 0 ||denominator1 ==0)
		{
			cout<< "Fractions cannot have a denominator of zero"<< endl;
			cout << "Please enter valid input" <<endl <<endl;
		}

		}while (denominator2 == 0 ||denominator1 ==0);
}
int greatestCommonDivisor(int denominator1, int denominator2) // we need this function to reduce fractions to simplest form
	{

	int remainder=0, small=0, big=0, gcf;

		if(denominator1 > denominator2) //if first number is the larger number do this code
		{

				 big = denominator1;
				 small = denominator2;

		}



		else if (denominator1 == denominator2)          //if numbers are the same the common divisor is the same  number
		{
			return denominator1;
		}


		else //do this code if the second number is the larger number
		{
			small= denominator1;
			big=denominator2;
		}



		do
		{
				remainder = big % small;
				big=small;
				small = remainder;

		}while (remainder != 0); //do while or while loop to go while the remainder is not equal to zero

		gcf=big;

		return gcf;
	}
int LCM( int denominator1, int denominator2)
{
	int gcf=0, lowestcommonmultiple;
	gcf = greatestCommonDivisor(denominator1,  denominator2);
	lowestcommonmultiple= (denominator1 *denominator2)/ gcf;


return lowestcommonmultiple;

}

void add(int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer)
{

	int gcf;

	gcf = greatestCommonDivisor(denominator1, denominator2);

	denanswer = LCM(denominator1, denominator2); //calculate LCM for fractions and convert fractions into fractions with common denominators



	numanswer= ((denanswer /denominator1)*numerator1)+ ((denanswer/ denominator2)*numerator2);
	   //divide LCM by original denominators and multiply by original numerators


}

void subtract(int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer)
{
	int gcf;

		gcf = greatestCommonDivisor(denominator1, denominator2);

		denanswer = LCM(denominator1, denominator2); //calculate LCM for fractions and convert fractions into fractions with common denominators



		numanswer= ((denanswer /denominator1)*numerator1)- ((denanswer/ denominator2)*numerator2);
		   //divide LCM by original denominators and multiply by original numerators


}

void multiply (int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer)
{
	numanswer= numerator1*numerator2;
	denanswer= denominator1*denominator2;

}

void divide (int numerator1, int denominator1, int numerator2 , int denominator2,  int &numanswer, int &denanswer)
{
	//cross multiplying is the same as fliping the second fraction and then multiplying
	numanswer= numerator1*denominator2;
	denanswer= denominator1*numerator2;


}
//reduce fraction function
void reduceFraction( int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom )
{

	int gcf=1;

	for (int N = denanswer; N>0; N--)
	{
		if (denanswer==0 && numanswer%N==0)
			gcf=N;
		break; // this allows us to find the smallest gcf instead of just any number that goes into both of teh numbers
	}

	gcf=  greatestCommonDivisor( numanswer,  denanswer);
cout << numanswer <<endl;
	reducednumerator = numanswer/gcf;
	reduceddenom = denanswer / gcf;

}

//output function
void output(int numerator1, int denominator1, int numerator2, int denominator2, int &numanswer, int &denanswer,int &reducednumerator, int &reduceddenom, char &sign)
{
	//first line of output

cout << " " << numerator1 <<"     "<< numerator2<<"     " << numanswer << " ";
if (reducednumerator != numanswer )
 {
cout <<"     " << reducednumerator;
 }

cout << endl;




//second line of output
cout << "--- "<< sign << " --- ";

if (denanswer!= 1 && reduceddenom !=1)
{
cout << "= --- ";
}
 if (reducednumerator != numanswer )
 {
cout << "= ---";
 }
 if (reducednumerator != numanswer && (denanswer==1 || reduceddenom ==1))
  {
	 cout << " =  "<< reducednumerator; // only include the reduced fraction if there is one
  }
cout << endl;


//last line of code
cout << " " <<denominator1 << "     " << denominator2 << "     " << denanswer << " " ;

if (denanswer!= 1 && reduceddenom !=1)
{
cout << " ";//removed the endl


if (reduceddenom!= denanswer && denanswer==0)
{
	cout << "     "<< reduceddenom;
}


if (reducednumerator != numanswer )
 {
cout <<"   " << reduceddenom;
 }
cout << endl;
}

}
